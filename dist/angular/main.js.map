{"version":3,"sources":["./src/app/differ-signup/differ-signup.component.ts","./src/app/differ-signup/differ-signup.component.html","./src/app/differ-signup-verify/differ-signup-verify.component.ts","./src/app/differ-signup-verify/differ-signup-verify.component.html","./src/app/config/http.interceptor.ts","./src/app/differ-my-profile/differ-my-profile.component.ts","./src/app/differ-my-profile/differ-my-profile.component.html","./src/environments/environment.ts","./src/app/differ-customer-information/differ-customer-information.component.ts","./src/app/differ-customer-information/differ-customer-information.component.html","./src/app/differ-nav-bar/differ-nav-bar.component.ts","./src/app/differ-nav-bar/differ-nav-bar.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/differ-service-list/differ-service-list.service.ts","./src/app/differ-service-list/differ-service-list.component.html","./src/app/differ-service-list/differ-service-list.component.ts","./src/app/differ-service-address/differ-service-address.component.ts","./src/app/differ-service-address/differ-service-address.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './../differ-service-list/differ-service-list.service';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-signup',\n  templateUrl: './differ-signup.component.html',\n  styleUrls: ['./differ-signup.component.css']\n})\nexport class DifferSignupComponent implements OnInit {\n\n  signupForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router, private differServiceList:DifferServiceList) { }\n\n  ngOnInit(): void {\n    this.signupForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\") ]),\n    });\n  }\n\n  get signupFormHas(): { [key: string]: AbstractControl } {\n    return this.signupForm.controls;\n  }\n  \n  customer : any;\n  async handleSubmit() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    let reqData = {\n      address:localStorage.getItem('address'),\n      selectedId:localStorage.getItem('selectedId'),\n      email: this.signupForm.value.email,\n    }\n    this.differServiceList.differCreateCustomer(reqData).subscribe(async (result:any) => {\n      console.log(result,\"result>>>>>>>>>>>>>>>>>\");\n      if(result['code'] == 204 ) {\n        this.router.navigate(['/differ-customer-information']);\n      }\n      if(result['code'] == 200 ) {\n        this.customer = result['data'];\n        this.router.navigate(['/differ-signup-verify']);\n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter your email address to create your account</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"signupForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Enter Your Email Address</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"email\" name=\"email\" required>\n                    </div>\n                     <div *ngIf=\"submitted && signupFormHas.email?.errors\">\n                         <small *ngIf=\"signupFormHas.email.errors?.required\" class=\"text-danger\" > Email Address is Required </small>\n                         <small *ngIf=\"signupFormHas.email.errors?.minlength\" class=\"text-danger\" > Email Address between 5 to 70 characters </small>\n                         <small *ngIf=\"signupFormHas.email.errors?.maxlength\" class=\"text-danger\" > Email Address between 5 to 70 characters</small>\n                         <small *ngIf=\"signupFormHas.email.errors?.pattern\" class=\"text-danger\" > Email Address is not valid</small>\n                     </div>\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-right\">Next</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-signup-verify',\n  templateUrl: './differ-signup-verify.component.html',\n  styleUrls: ['./differ-signup-verify.component.css']\n})\nexport class DifferSignupVerifyComponent implements OnInit {\n\n  signupVerifyForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.signupVerifyForm = new FormGroup({\n      emailOTP: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(6) ]),\n    });\n  }\n\n  get signupVerifyFormHas(): { [key: string]: AbstractControl } {\n    return this.signupVerifyForm.controls;\n  }\n\n  handleSubmit() {\n    this.submitted = true;\n    if (this.signupVerifyForm.invalid) {\n      return;\n    }\n    let reqData = {\n      email: this.signupVerifyForm.value.email,\n    }\n    this.router.navigate(['/differ-customer-information']);\n    console.log(reqData,\"address form value...\");\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter your email address to create your account</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"signupVerifyForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Enter the code that was sent to your email address</label>\n                        \n                        <input type=\"number\" class=\"form-control\" formControlName=\"emailOTP\" name=\"emailOTP\" maxlength=\"6\"  pattern=\"[1-9]{1}[0-9]{5}\" required>\n                    </div>\n                     <div *ngIf=\"submitted && signupVerifyFormHas.emailOTP?.errors\">\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.required\" class=\"text-danger\" > OTP is Required </small>\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.min\" class=\"text-danger\" > OTP need to be 6 digit </small>\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.max\" class=\"text-danger\" > OTP need to be 6 digit</small>\n                     </div>\n\n                    <div class=\"\">  \n                        <button type=\"submit\" class=\"btn btn-success\">Verify</button>\n                        <a routerLink=\"/differ-signup-verify\" class=\"text-center float-right\">didn't receive your code? </a>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpResponse, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from './../../environments/environment';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\n\r\n@Injectable()\r\nexport class MyInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private ngxLoader: NgxUiLoaderService\r\n  ) { }\r\n\r\n  intercept(httpRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (token) {\r\n        const authReq = httpRequest.clone({\r\n            headers: httpRequest.headers.set('authorization',token)\r\n        });\r\n        httpRequest = authReq;\r\n        // this.ngxLoader.start();\r\n    }\r\n    return next.handle(httpRequest).pipe(\r\n      tap(\r\n          event => this.handleResponse(httpRequest, event),\r\n          error => this.handleError(httpRequest, error)\r\n      )\r\n    );\r\n  }\r\n\r\n  handleResponse(httpRequest: HttpRequest<any>, event:any) {\r\n      // this.ngxLoader.stop();\r\n      //console.log('Handling response for ', req.url, event);\r\n      if (event instanceof HttpResponse) {\r\n          // console.log('Request for ', req.url,\r\n          //      ' Response Status ', event.status,\r\n          //      ' With body ', event.body);\r\n      }\r\n  }\r\n\r\n  handleError(httpRequest: HttpRequest<any>, error:any) {\r\n    // this.ngxLoader.stop();\r\n    if (error.status == 400 || error.status == 401 || error.status == 404|| error.status == 500){\r\n        sessionStorage.clear();\r\n        setTimeout(() => {\r\n          //window.location.href =environment.redirect_link;\r\n        }, 1000);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './../differ-service-list/differ-service-list.service';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-my-profile',\n  templateUrl: './differ-my-profile.component.html',\n  styleUrls: ['./differ-my-profile.component.css']\n})\nexport class DifferMyProfileComponent implements OnInit {\n\n  constructor() { }\n  \n  myProfileForm!: FormGroup;\n  mySubscriptionForm!: FormGroup;\n  MyNetworkForm!: FormGroup;\n  submitted = false;\n\n  ngOnInit(): void {\n    this.myProfileForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n    });\n\n    this.mySubscriptionForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n    });\n\n    this.MyNetworkForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n    });\n  }\n\n  get myProfileFormHas(): { [key: string]: AbstractControl } {\n    return this.myProfileForm.controls;\n  }\n\n  get mySubscriptionFormHas(): { [key: string]: AbstractControl } {\n    return this.mySubscriptionForm.controls;\n  }\n\n  get MyNetworkFormHas(): { [key: string]: AbstractControl } {\n    return this.MyNetworkForm.controls;\n  }\n\n  handleSubmit1() {\n    this.submitted = true;\n    if (this.myProfileForm.invalid) {\n      return;\n    }\n  }\n\n  handleSubmit2() {\n    this.submitted = true;\n    if (this.mySubscriptionForm.invalid) {\n      return;\n    }\n  }\n\n  handleSubmit3() {\n    this.submitted = true;\n    if (this.MyNetworkForm.invalid) {\n      return;\n    }\n  }\n\n  \n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n<mat-tab-group class=\"ml-5 justify-content-center text-center\">\n    <mat-tab label=\"My Profile\"> \n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Customer Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"myProfileForm\" (ngSubmit)=\"handleSubmit1()\" class=\"form\">\n                            \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Name</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && myProfileFormHas.name?.errors\">\n                                 <small *ngIf=\"myProfileFormHas.name.errors?.required\" class=\"text-danger\" > Name is Required </small>\n                                 <small *ngIf=\"myProfileFormHas.name.errors?.minlength\" class=\"text-danger\" > Name between 5 to 30 characters </small>\n                                 <small *ngIf=\"myProfileFormHas.name.errors?.maxlength\" class=\"text-danger\" > Name between 5 to 30 characters</small>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Password</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"password\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && myProfileFormHas.password?.errors\">\n                                 <small *ngIf=\"myProfileFormHas.password.errors?.required\" class=\"text-danger\" > Password is Required </small>\n                                 <small *ngIf=\"myProfileFormHas.password.errors?.minlength\" class=\"text-danger\" > Password between 5 to 15 characters </small>\n                                 <small *ngIf=\"myProfileFormHas.password.errors?.maxlength\" class=\"text-danger\" > Password between 5 to 15 characters</small>\n                             </div>\n        \n                             <div class=\"form-group rounded-15\">\n                                <label for=\"\">Service Address</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"serviceAddress\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && myProfileFormHas.serviceAddress?.errors\">\n                                 <small *ngIf=\"myProfileFormHas.serviceAddress.errors?.required\" class=\"text-danger\" > Service Address is Required </small>\n                                 <small *ngIf=\"myProfileFormHas.serviceAddress.errors?.minlength\" class=\"text-danger\" > Service Address between 5 to 70 characters </small>\n                                 <small *ngIf=\"myProfileFormHas.serviceAddress.errors?.maxlength\" class=\"text-danger\" > Service Address between 5 to 70 characters</small>\n                             </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-tab>\n    <mat-tab label=\"My Subscription\">\n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Customer Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"mySubscriptionForm\" (ngSubmit)=\"handleSubmit2()\" class=\"form\">\n                            \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Name</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && mySubscriptionFormHas.name?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.required\" class=\"text-danger\" > Name is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.minlength\" class=\"text-danger\" > Name between 5 to 30 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.maxlength\" class=\"text-danger\" > Name between 5 to 30 characters</small>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Password</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"password\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && mySubscriptionFormHas.password?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.required\" class=\"text-danger\" > Password is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.minlength\" class=\"text-danger\" > Password between 5 to 15 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.maxlength\" class=\"text-danger\" > Password between 5 to 15 characters</small>\n                             </div>\n        \n                             <div class=\"form-group rounded-15\">\n                                <label for=\"\">Service Address</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"serviceAddress\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && mySubscriptionFormHas.serviceAddress?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.required\" class=\"text-danger\" > Service Address is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.minlength\" class=\"text-danger\" > Service Address between 5 to 70 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.maxlength\" class=\"text-danger\" > Service Address between 5 to 70 characters</small>\n                             </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div> \n    </mat-tab>\n    <mat-tab label=\"My Network\"> \n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Customer Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"MyNetworkForm\" (ngSubmit)=\"handleSubmit3()\" class=\"form\">\n                            \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Name</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && MyNetworkFormHas.name?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.name.errors?.required\" class=\"text-danger\" > Name is Required </small>\n                                 <small *ngIf=\"MyNetworkFormHas.name.errors?.minlength\" class=\"text-danger\" > Name between 5 to 30 characters </small>\n                                 <small *ngIf=\"MyNetworkFormHas.name.errors?.maxlength\" class=\"text-danger\" > Name between 5 to 30 characters</small>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Password</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"password\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && MyNetworkFormHas.password?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.password.errors?.required\" class=\"text-danger\" > Password is Required </small>\n                                 <small *ngIf=\"MyNetworkFormHas.password.errors?.minlength\" class=\"text-danger\" > Password between 5 to 15 characters </small>\n                                 <small *ngIf=\"MyNetworkFormHas.password.errors?.maxlength\" class=\"text-danger\" > Password between 5 to 15 characters</small>\n                             </div>\n        \n                             <div class=\"form-group rounded-15\">\n                                <label for=\"\">Service Address</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"serviceAddress\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted && MyNetworkFormHas.serviceAddress?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.serviceAddress.errors?.required\" class=\"text-danger\" > Service Address is Required </small>\n                                 <small *ngIf=\"MyNetworkFormHas.serviceAddress.errors?.minlength\" class=\"text-danger\" > Service Address between 5 to 70 characters </small>\n                                 <small *ngIf=\"MyNetworkFormHas.serviceAddress.errors?.maxlength\" class=\"text-danger\" > Service Address between 5 to 70 characters</small>\n                             </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n  ","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:3000'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-customer-information',\n  templateUrl: './differ-customer-information.component.html',\n  styleUrls: ['./differ-customer-information.component.css']\n})\nexport class DifferCustomerInformationComponent implements OnInit {\n\n  InformationForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router) { }\n\n\n  ngOnInit(): void {\n    this.InformationForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n    });\n  }\n\n  get informationFormHas(): { [key: string]: AbstractControl } {\n    return this.InformationForm.controls;\n  }\n\n\n\n  handleSubmit() {\n    this.submitted = true;\n    if (this.InformationForm.invalid) {\n      return;\n    }\n    this.router.navigate(['/differ-my-profile']);\n  }\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Customer Information</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"InformationForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Name</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\" required>\n                    </div>\n                     <div *ngIf=\"submitted && informationFormHas.name?.errors\">\n                         <small *ngIf=\"informationFormHas.name.errors?.required\" class=\"text-danger\" > Name is Required </small>\n                         <small *ngIf=\"informationFormHas.name.errors?.minlength\" class=\"text-danger\" > Name between 5 to 30 characters </small>\n                         <small *ngIf=\"informationFormHas.name.errors?.maxlength\" class=\"text-danger\" > Name between 5 to 30 characters</small>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Password</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"password\" name=\"name\" required>\n                    </div>\n                     <div *ngIf=\"submitted && informationFormHas.password?.errors\">\n                         <small *ngIf=\"informationFormHas.password.errors?.required\" class=\"text-danger\" > Password is Required </small>\n                         <small *ngIf=\"informationFormHas.password.errors?.minlength\" class=\"text-danger\" > Password between 5 to 15 characters </small>\n                         <small *ngIf=\"informationFormHas.password.errors?.maxlength\" class=\"text-danger\" > Password between 5 to 15 characters</small>\n                     </div>\n\n                     <div class=\"form-group rounded-15\">\n                        <label for=\"\">Service Address</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"serviceAddress\" name=\"name\" required>\n                    </div>\n                     <div *ngIf=\"submitted && informationFormHas.serviceAddress?.errors\">\n                         <small *ngIf=\"informationFormHas.serviceAddress.errors?.required\" class=\"text-danger\" > Service Address is Required </small>\n                         <small *ngIf=\"informationFormHas.serviceAddress.errors?.minlength\" class=\"text-danger\" > Service Address between 5 to 70 characters </small>\n                         <small *ngIf=\"informationFormHas.serviceAddress.errors?.maxlength\" class=\"text-danger\" > Service Address between 5 to 70 characters</small>\n                     </div>\n\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-differ-nav-bar',\n  templateUrl: './differ-nav-bar.component.html',\n  styleUrls: ['./differ-nav-bar.component.css']\n})\nexport class DifferNavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>\n    <mat-toolbar color=\"primary\">\n        <!-- routerLink=\"/dashboard\" -->\n      <button  mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n        <span>DIFFER</span>  \n      </button>\n    </mat-toolbar>\n  </p> ","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Alexa-angular';\r\n}\r\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { MyInterceptor } from './config/http.interceptor';\r\nimport { NgxSmartModalModule, NgxSmartModalService } from 'ngx-smart-modal';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatButtonModule } from '@angular/material/button'\r\nimport { MatIconModule } from '@angular/material/icon'\r\nimport { MatToolbarModule } from '@angular/material/toolbar'\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule }  from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { DifferServiceAddressComponent } from './differ-service-address/differ-service-address.component';\r\nimport { DifferServiceListComponent } from './differ-service-list/differ-service-list.component';\r\nimport { DifferSignupComponent } from './differ-signup/differ-signup.component';\r\nimport { DifferSignupVerifyComponent } from './differ-signup-verify/differ-signup-verify.component';\r\nimport { DifferCustomerInformationComponent } from './differ-customer-information/differ-customer-information.component';\r\nimport { DifferNavBarComponent } from './differ-nav-bar/differ-nav-bar.component';\r\nimport { DifferMyProfileComponent } from './differ-my-profile/differ-my-profile.component';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    DifferServiceAddressComponent,\r\n    DifferServiceListComponent,\r\n    DifferSignupComponent,\r\n    DifferSignupVerifyComponent,\r\n    DifferCustomerInformationComponent,\r\n    DifferNavBarComponent,\r\n    DifferMyProfileComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatTableModule,\r\n    NgxSmartModalModule.forRoot(),\r\n    NgbModule\r\n    ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: MyInterceptor, multi: true },\r\n    NgxSmartModalService\r\n\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DifferServiceList {\n\n  constructor(private http:HttpClient) { }\n\n  differItemList() {\n    return this.http.get(\"http://localhost:3000/api/v1/auth/chargebee-item-list\");\n  }\n\n  differCreateCustomer(data:any) {\n    return this.http.post(\"http://localhost:3000/api/v1/auth/chargebee-user-list\",data);\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 mb-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">{{ address }}</h3>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"row center-service-list \">\n    <div class=\"col-4 mb-4  \" *ngFor=\"let element of serviceItemList\">\n        <div class=\"card\" style=\"width: 18rem;\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Service Title</h5>\n              <h6 class=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>\n              <p class=\"card-text\">- {{ element.item.name }}.</p>\n              <p class=\"card-text\">- {{ element.item.status }}.</p>\n              <p class=\"card-text\">- here is a feature included.</p>\n              <button type=\"button\" (click)=\"handleServiceClick(element)\" class=\"card-link btn btn-info\">Order</button>\n            </div>\n          </div>\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './differ-service-list.service';\nimport swal from 'sweetalert2';\n\n\n@Component({\n  selector: 'app-differ-service-list',\n  templateUrl: './differ-service-list.component.html',\n  styleUrls: ['./differ-service-list.component.css']\n})\nexport class DifferServiceListComponent implements OnInit {\n  public address : any = \"\";\n  public serviceList: any = [1,2,3];\n\n  constructor(private router: Router, private differServiceList:DifferServiceList) { }\n\n  ngOnInit(): void {\n    this.address = localStorage.getItem('address');\n    this.getItemList();   \n  }\n\n  handleServiceClick(data:any) {\n    // console.log(\"data>>>>>>>>>>>>>>>>>>>\",data);\n    localStorage.setItem(\"selectedId\",data.item.id);\n    this.router.navigate(['/differ-signup']);\n  }\n\n  serviceItemList : any = [];\n  getItemList() {\n    this.differServiceList.differItemList().subscribe((result:any) => {\n      console.log(result,\"result>>>>>>>>>>>>>>>>>\");\n      if(result['code'] == 200 ) {\n        this.serviceItemList = result['data']['list'];\n        console.log(this.serviceItemList)\n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-service-address',\n  templateUrl: './differ-service-address.component.html',\n  styleUrls: ['./differ-service-address.component.css']\n})\nexport class DifferServiceAddressComponent implements OnInit {\n\n  serviceAddressForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.serviceAddressForm = new FormGroup({\n      address: new FormControl('', [Validators.required ]),\n    });\n  }\n\n  get serviceAddressFormHas(): { [key: string]: AbstractControl } {\n    return this.serviceAddressForm.controls;\n  }\n\n  handleSubmit() {\n    this.submitted = true;\n    if (this.serviceAddressForm.invalid) {\n      return;\n    }\n    console.log(this.serviceAddressForm.value)\n    localStorage.removeItem('address') \n    localStorage.setItem(\"address\",this.serviceAddressForm.value.address);\n    this.router.navigate(['/differ-service-list']);\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://ws1.postescanada-canadapost.ca/css/addresscomplete-2.30.min.css?key=ac53-ck32-re78-gc78\" /><script type=\"text/javascript\" src=\"http://ws1.postescanada-canadapost.ca/js/addresscomplete-2.30.min.js?key=ac53-ck32-re78-gc78\"></script>\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter your address to determine service</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"serviceAddressForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Enter Your Address</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"address\" name=\"address\" required>\n                    </div>\n                     <div *ngIf=\"submitted && serviceAddressFormHas.address?.errors\">\n                         <small *ngIf=\"serviceAddressFormHas.address.errors?.required\" class=\"text-danger\" > Address is Required </small>\n                     </div>\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-right\">Check Service</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppComponent } from './app.component';\r\nimport { DifferCustomerInformationComponent } from './differ-customer-information/differ-customer-information.component';\r\nimport { DifferMyProfileComponent } from './differ-my-profile/differ-my-profile.component';\r\nimport { DifferServiceAddressComponent } from './differ-service-address/differ-service-address.component';\r\nimport { DifferServiceListComponent } from './differ-service-list/differ-service-list.component';\r\nimport { DifferSignupVerifyComponent } from './differ-signup-verify/differ-signup-verify.component';\r\nimport { DifferSignupComponent } from './differ-signup/differ-signup.component';\r\nimport { RouteGuard } from './route.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path : '',\r\n    pathMatch:'full',\r\n    redirectTo:'/differ-service-address',\r\n  },\r\n  {\r\n    path: 'differ-service-address',\r\n    component: DifferServiceAddressComponent,\r\n  },\r\n  {\r\n    path: 'differ-service-list',\r\n    component: DifferServiceListComponent,\r\n  },\r\n  {\r\n    path: 'differ-signup',\r\n    component: DifferSignupComponent,\r\n  },\r\n  {\r\n    path: 'differ-signup-verify',\r\n    component: DifferSignupVerifyComponent,\r\n  },\r\n  {\r\n    path: 'differ-customer-information',\r\n    component: DifferCustomerInformationComponent,\r\n  },\r\n  {\r\n    path: 'differ-my-profile',\r\n    component: DifferMyProfileComponent,\r\n  },\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}