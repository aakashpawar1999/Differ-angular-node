{"version":3,"sources":["./src/app/differ-signup/differ-signup.component.ts","./src/app/differ-signup/differ-signup.component.html","./src/app/differ-signup-verify/differ-signup-verify.component.ts","./src/app/differ-signup-verify/differ-signup-verify.component.html","./src/app/config/http.interceptor.ts","./src/app/differ-my-profile/differ-my-profile.component.ts","./src/app/differ-my-profile/differ-my-profile.component.html","./src/environments/environment.ts","./src/app/checkout/checkout.component.ts","./src/app/checkout/checkout.component.html","./src/app/differ-customer-information/differ-customer-information.component.ts","./src/app/differ-customer-information/differ-customer-information.component.html","./src/app/differ-nav-bar/differ-nav-bar.component.ts","./src/app/differ-nav-bar/differ-nav-bar.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/differ-service-list/differ-service-list.service.ts","./src/app/differ-service-list/differ-service-list.component.html","./src/app/differ-service-list/differ-service-list.component.ts","./src/app/differ-service-address/differ-service-address.component.ts","./src/app/differ-service-address/differ-service-address.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './../differ-service-list/differ-service-list.service';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-signup',\n  templateUrl: './differ-signup.component.html',\n  styleUrls: ['./differ-signup.component.css']\n})\nexport class DifferSignupComponent implements OnInit {\n\n  signupForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router, private differServiceList:DifferServiceList) { }\n\n  ngOnInit(): void {\n    this.signupForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\") ]),\n    });\n  }\n\n  get signupFormHas(): { [key: string]: AbstractControl } {\n    return this.signupForm.controls;\n  }\n  \n  customer : any;\n  async handleSubmit() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    sessionStorage.setItem('email',this.signupForm.value.email);\n    let reqData = {\n      address:sessionStorage.getItem('address'),\n      selectedId:sessionStorage.getItem('selectedId'),\n      email: this.signupForm.value.email,\n    }\n    this.differServiceList.differCreateCustomer(reqData).subscribe(async (result:any) => {\n      console.log(result,\"result>>>>>>>>>>>>>>>>>\");\n      if(result['code'] == 201 ) {\n        this.router.navigate(['/differ-customer-information']);\n      }\n      if(result['code'] == 200 || result['code'] == 204) {\n        this.customer = result['data'];\n        this.router.navigate(['/differ-signup-verify']);\n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter your email address to create your account</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"signupForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Enter Your Email Address</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"email\" name=\"email\" required>\n                    </div>\n                     <div *ngIf=\"submitted && signupFormHas.email?.errors\">\n                         <small *ngIf=\"signupFormHas.email.errors?.required\" class=\"text-danger\" > Email Address is Required </small>\n                         <small *ngIf=\"signupFormHas.email.errors?.minlength\" class=\"text-danger\" > Email Address between 5 to 70 characters </small>\n                         <small *ngIf=\"signupFormHas.email.errors?.maxlength\" class=\"text-danger\" > Email Address between 5 to 70 characters</small>\n                         <small *ngIf=\"signupFormHas.email.errors?.pattern\" class=\"text-danger\" > Email Address is not valid</small>\n                     </div>\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-right\">Next</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChildren } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Key } from 'protractor';\nimport swal from 'sweetalert2';\nimport { DifferServiceList } from './../differ-service-list/differ-service-list.service'\n\n@Component({\n  selector: 'app-differ-signup-verify',\n  templateUrl: './differ-signup-verify.component.html',\n  styleUrls: ['./differ-signup-verify.component.css']\n})\n\nexport class DifferSignupVerifyComponent implements OnInit {\n\n  signupVerifyForm!: FormGroup;\n  submitted = false;\n  formInput = ['input1', 'input2', 'input3', 'input4', 'input5', 'input6'];\n  @ViewChildren('formRow') rows: any;\n  \n  constructor(private router: Router, private differServiceList:DifferServiceList) {\n    this.signupVerifyForm = this.toFormGroup(this.formInput);\n  }\n\n  toFormGroup(elements:any) {\n    const group: any = {};\n\n    elements.forEach((key:any) => {\n      group[key] = new FormControl('', Validators.required);\n    });\n    return new FormGroup(group);\n  }\n\n  ngOnInit(): void {\n    // this.signupVerifyForm = new FormGroup({\n    //   emailOTP: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(6) ]),\n    // });\n  }\n\n  keyUpEvent(event:any, index:any) {\n    let pos = index;\n    if (event.keyCode === 8 && event.which === 8) {\n      pos = index - 1 ;\n    } else {\n      pos = index + 1 ;\n    }\n    if (pos > -1 && pos < this.formInput.length ) {\n      this.rows._results[pos].nativeElement.focus();\n    }\n  }\n\n  get signupVerifyFormHas(): { [key: string]: AbstractControl } {\n    return this.signupVerifyForm.controls;\n  }\n\n  OTP:any = [];\n  FULL_OTP:any = [];\n  handleSubmit() {\n    this.submitted = true;\n    if (this.signupVerifyForm.invalid) {\n      return;\n    }\n\n    let obj = { \n      ...this.signupVerifyForm.value\n    };\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n          this.OTP.push(obj[key]);\n      }\n    }\n\n    this.FULL_OTP = this.OTP.join('');\n    console.log(this.FULL_OTP);\n    \n    let reqData = {\n      email:sessionStorage.getItem('email'),\n      FULL_OTP: this.FULL_OTP,\n    }\n    this.differServiceList.differSignUpVerifyOTP(reqData).subscribe((result:any) => {\n      if(result['code'] == 200 ) {\n        this.router.navigate(['/differ-customer-information']);\n      }\n      else {\n        this.signupVerifyForm.reset();\n        this.FULL_OTP = [];\n        this.OTP = [];\n        swal.fire('OTP is Invalid');\n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter the code that was sent to your email address</h3>\n            </div>\n            <div class=\"card-body text-center\">\n                \n                <form [formGroup]=\"signupVerifyForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    <div class=\"row\">\n                        <div class=\"form-group col-sm-2\" *ngFor=\"let input of formInput;  index as i\">\n                            <input type=\"text\" #formRow class=\"form-control\" formControlName=\"{{input}}\" maxlength=\"1\" name=\"emailOTP\" (keyup)=\"keyUpEvent($event, i)\" required>\n                        </div>\n                    </div>\n                     <!-- <div *ngIf=\"submitted && signupVerifyFormHas.emailOTP?.errors\">\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.required\" class=\"text-danger\" > OTP is Required </small>\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.min\" class=\"text-danger\" > OTP need to be 6 digit </small>\n                         <small *ngIf=\"signupVerifyFormHas.emailOTP.errors?.max\" class=\"text-danger\" > OTP need to be 6 digit</small>\n                     </div> -->\n\n                    <div class=\"\">  \n                        <button type=\"submit\" class=\"btn btn-success\">Verify</button>\n                        <a routerLink=\"/differ-signup-verify\" class=\"text-center float-right\">didn't receive your code? </a>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpResponse, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from './../../environments/environment';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\n\r\n@Injectable()\r\nexport class MyInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private ngxLoader: NgxUiLoaderService\r\n  ) { }\r\n\r\n  intercept(httpRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (token) {\r\n        const authReq = httpRequest.clone({\r\n            headers: httpRequest.headers.set('authorization',token)\r\n        });\r\n        httpRequest = authReq;\r\n        // this.ngxLoader.start();\r\n    }\r\n    return next.handle(httpRequest).pipe(\r\n      tap(\r\n          event => this.handleResponse(httpRequest, event),\r\n          error => this.handleError(httpRequest, error)\r\n      )\r\n    );\r\n  }\r\n\r\n  handleResponse(httpRequest: HttpRequest<any>, event:any) {\r\n      // this.ngxLoader.stop();\r\n      //console.log('Handling response for ', req.url, event);\r\n      if (event instanceof HttpResponse) {\r\n          // console.log('Request for ', req.url,\r\n          //      ' Response Status ', event.status,\r\n          //      ' With body ', event.body);\r\n      }\r\n  }\r\n\r\n  handleError(httpRequest: HttpRequest<any>, error:any) {\r\n    // this.ngxLoader.stop();\r\n    if (error.status == 400 || error.status == 401 || error.status == 404|| error.status == 500){\r\n        sessionStorage.clear();\r\n        setTimeout(() => {\r\n          //window.location.href =environment.redirect_link;\r\n        }, 1000);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './../differ-service-list/differ-service-list.service';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-differ-my-profile',\n  templateUrl: './differ-my-profile.component.html',\n  styleUrls: ['./differ-my-profile.component.css']\n})\nexport class DifferMyProfileComponent implements OnInit {\n\n  constructor(private differServiceList:DifferServiceList) { }\n  \n  myProfileForm!: FormGroup;\n  mySubscriptionForm!: FormGroup;\n  MyNetworkForm!: FormGroup;\n  submitted1 = false;\n  submitted2 = false;\n  submitted3 = false;\n\n  ngOnInit(): void {\n    this.myProfileForm = new FormGroup({\n      firstName: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(30) ]),\n      lastName: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(30) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      birthday: new FormControl('', [Validators.required ]),\n    });\n\n    this.mySubscriptionForm = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15) ]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70) ]),\n    });\n\n    this.MyNetworkForm = new FormGroup({\n      SSID: new FormControl('', [Validators.required ]),\n      NetworkPassword: new FormControl('', [Validators.required ]),\n    });\n\n    this.prefilledValue();\n    this.getNetworkInfo();\n  }\n\n  get myProfileFormHas(): { [key: string]: AbstractControl } {\n    return this.myProfileForm.controls;\n  }\n\n  get mySubscriptionFormHas(): { [key: string]: AbstractControl } {\n    return this.mySubscriptionForm.controls;\n  }\n\n  get MyNetworkFormHas(): { [key: string]: AbstractControl } {\n    return this.MyNetworkForm.controls;\n  }\n\n  handleSubmit1() {\n    this.submitted1 = true;\n    if (this.myProfileForm.invalid) {\n      return;\n    }\n    let reqData = {\n      email:sessionStorage.getItem('email'),\n      firstName: this.myProfileForm.value.firstName,\n      lastName: this.myProfileForm.value.lastName,\n      password: this.myProfileForm.value.password,\n      serviceAddress: this.myProfileForm.value.serviceAddress,\n      birthday: this.myProfileForm.value.birthday,\n    };\n    this.differServiceList.differCustomerInformation(reqData).subscribe((result:any) => {\n      console.log(result,\"result>>>>>>>>\");\n      if(result['code'] == 200) {\n        swal.fire(\"profile update successfully...\");\n      }\n\n    },(err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n\n  formattedDate:any;\n  prefilledValue() {\n    let dt = sessionStorage.getItem('birthday');\n    if(dt) {\n      this.formattedDate = this.convertDate(dt);\n    }\n    this.myProfileForm.patchValue({\n      firstName: sessionStorage.getItem('firstName') ,\n      lastName: sessionStorage.getItem('lastName') ,\n      password: sessionStorage.getItem('password') ,\n      serviceAddress: sessionStorage.getItem('address') ,\n      birthday : new Date(this.formattedDate[0]+'/'+this.formattedDate[1]+'/'+this.formattedDate[2])\n    });\n  }\n\n  handleSubmit2() {\n    this.submitted2 = true;\n    if (this.mySubscriptionForm.invalid) {\n      return;\n    }\n  }\n\n  handleSubmit3() {\n    this.submitted3 = true;\n    if (this.MyNetworkForm.invalid) {\n      return;\n    }\n  }\n\n  convertDate(str:any) {\n    var date = new Date(str),\n      mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n      day = (\"0\" + date.getDate()).slice(-2);\n    return [date.getFullYear(), mnth, day];\n  }\n\n  DeviceArr:any = [];\n  getNetworkInfo() {\n    let reqObj = {\n      email:sessionStorage.getItem('email')\n    }\n    this.differServiceList.differGetNetworkInfo(reqObj).subscribe((result:any) => {\n      console.log(result,\"result>>>>>>>>>>>>>>>>>\");\n      if(result['code'] == 200 ) {\n        \n        result.data.devices.forEach((element:any) => {\n          this.DeviceArr.push(element)\n        });\n         this.MyNetworkForm.patchValue({\n          SSID: result.data.ssid,\n          NetworkPassword :result.data.wpa2_key,\n         });\n        console.log(this.MyNetworkForm.value,\"value>\");\n        \n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n  \n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n<mat-tab-group class=\"ml-5 justify-content-center text-center\">\n    <mat-tab label=\"My Profile\"> \n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Customer Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"myProfileForm\" (ngSubmit)=\"handleSubmit1()\" class=\"form\">\n        \n                            <div class=\"form-group rounded-15\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"First Name\" formControlName=\"firstName\" required>\n                                    <mat-error *ngIf=\"submitted1 && myProfileFormHas.firstName?.errors\">\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.firstName.errors?.required\">\n                                            First Name is Required </mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.firstName.errors?.minlength\">\n                                            First Name between 3 to 30 characters</mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.firstName.errors?.maxlength\">\n                                            First Name between 3 to 30 characters</mat-error>\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"Last Name\" formControlName=\"lastName\" required>\n                                    <mat-error *ngIf=\"submitted1 && myProfileFormHas.lastName?.errors\">\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.lastName.errors?.required\">\n                                            Last Name is Required </mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.lastName.errors?.minlength\">\n                                            Last Name between 3 to 30 characters</mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.lastName.errors?.maxlength\">\n                                            Last Name between 3 to 30 characters</mat-error>\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <mat-form-field class=\"full-width\">\n                                    <input type=\"password\" matInput placeholder=\"password\" formControlName=\"password\"\n                                        name=\"password\" required>\n                                    <mat-error *ngIf=\"submitted1 && myProfileFormHas.password?.errors\">\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.password.errors?.required\">\n                                            Password is Required </mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.password.errors?.minlength\">\n                                            Password between 5 to 15 characters</mat-error>\n                                        <mat-error class=\"error-message\" *ngIf=\"myProfileFormHas.password.errors?.maxlength\">\n                                            Password between 5 to 15 characters</mat-error>\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"serviceAddress\" formControlName=\"serviceAddress\"\n                                        name=\"serviceAddress\" required>\n                                    <mat-error *ngIf=\"submitted1 && myProfileFormHas.serviceAddress?.errors\">\n                                        <mat-error class=\"error-message\"\n                                            *ngIf=\"myProfileFormHas.serviceAddress.errors?.required\">Service Address\n                                            is Required </mat-error>\n                                        <mat-error class=\"error-message\"\n                                            *ngIf=\"myProfileFormHas.serviceAddress.errors?.minlength\">Service Address\n                                            between 5 to 70 characters</mat-error>\n                                        <mat-error class=\"error-message\"\n                                            *ngIf=\"myProfileFormHas.serviceAddress.errors?.maxlength\">Service Address\n                                            between 5 to 70 characters</mat-error>\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput [matDatepicker]=\"picker\" placeholder=\"Your birthday\"\n                                        formControlName=\"birthday\" required>\n                                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                    <mat-datepicker #picker></mat-datepicker>\n                                    <mat-error *ngIf=\"submitted1 && myProfileFormHas.birthday?.errors\">\n                                        <mat-error *ngIf=\"myProfileFormHas.birthday.errors?.required\">Birth Date is Required\n                                        </mat-error>\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-tab>\n    <mat-tab label=\"My Subscription\">\n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Customer Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"mySubscriptionForm\" (ngSubmit)=\"handleSubmit2()\" class=\"form\">\n                            \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Name</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"name\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted2 && mySubscriptionFormHas.name?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.required\" class=\"text-danger\" > Name is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.minlength\" class=\"text-danger\" > Name between 5 to 30 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.name.errors?.maxlength\" class=\"text-danger\" > Name between 5 to 30 characters</small>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Password</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"password\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted2 && mySubscriptionFormHas.password?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.required\" class=\"text-danger\" > Password is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.minlength\" class=\"text-danger\" > Password between 5 to 15 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.password.errors?.maxlength\" class=\"text-danger\" > Password between 5 to 15 characters</small>\n                             </div>\n        \n                             <div class=\"form-group rounded-15\">\n                                <label for=\"\">Service Address</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"serviceAddress\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted2 && mySubscriptionFormHas.serviceAddress?.errors\">\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.required\" class=\"text-danger\" > Service Address is Required </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.minlength\" class=\"text-danger\" > Service Address between 5 to 70 characters </small>\n                                 <small *ngIf=\"mySubscriptionFormHas.serviceAddress.errors?.maxlength\" class=\"text-danger\" > Service Address between 5 to 70 characters</small>\n                             </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div> \n    </mat-tab>\n    <mat-tab label=\"My Network\"> \n        <div class=\"row mt-5 title\">\n            <div class=\"col-md-6 mx-auto\">\n                <div class=\"card rounded-20\">\n                    <div class=\"card-header\">\n                        <h3 class=\"mb-0\">Network Information</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        \n                        <form [formGroup]=\"MyNetworkForm\" (ngSubmit)=\"handleSubmit3()\" class=\"form\">\n                            \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">SSID</label>\n                                \n                                <input type=\"text\" class=\"form-control\" formControlName=\"SSID\" name=\"SSID\" required>\n                            </div>\n                             <div *ngIf=\"submitted3 && MyNetworkFormHas.SSID?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.SSID.errors?.required\" class=\"text-danger\" > SSID is Required </small>\n                            </div>\n        \n                            <div class=\"form-group rounded-15\">\n                                <label for=\"\">Network Password</label>\n                                \n                                <input type=\"password\" class=\"form-control\" formControlName=\"NetworkPassword\" name=\"name\" required>\n                            </div>\n                             <div *ngIf=\"submitted3 && MyNetworkFormHas.NetworkPassword?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.NetworkPassword.errors?.required\" class=\"text-danger\" > Network Password is Required </small>\n                             </div>\n        \n                             <div class=\"form-group rounded-15\">\n                                <label for=\"\">My Devices</label>\n                                <div>\n                                    <span *ngFor=\"let ele of DeviceArr\">{{ ele.ip }} {{ ele.hostname }}</span>\n                                </div>\n                            </div>\n                             <div *ngIf=\"submitted3 && MyNetworkFormHas.MyDevice?.errors\">\n                                 <small *ngIf=\"MyNetworkFormHas.MyDevice.errors?.required\" class=\"text-danger\" > My Devices is Required </small>\n                             </div>\n        \n                            <div class=\"\">\n                                <button type=\"submit\" class=\"btn btn-success float-left\"> Submit </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n  ","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:3000'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n  first_name: any;\n  last_name: any;\n  email: any;\n  company: any;\n  phone: any;\n  cbInstance: any;\n  loading: any;\n  errMsg: any;\n\n  constructor(private http: HttpClient, private ref: ChangeDetectorRef) {\n  }\n\n  getFormUrlEncoded(toConvert:any) {\n\t\tconst formBody = [];\n\t\tfor (const property in toConvert) {\n      const encodedKey = encodeURIComponent(property);\n      if(toConvert[property]) {\n        const encodedValue = encodeURIComponent(toConvert[property]);\n        formBody.push(encodedKey + '=' + encodedValue);\n      }\n\t\t}\n\t\treturn formBody.join('&');\n\t} \n  ngOnInit() {\n    this.cbInstance = (window as { [key: string]: any })['Chargebee'].init({\n      site: \"archittest-test\"\n    });\n  }\n\n  openCheckout() {\n    this.cbInstance.openCheckout({\n      hostedPage: () => {\n        this.loading = true;\n        // Hit your end point that returns hosted page object as response\n        // This sample end point will call checkout new api\n        // https://apidocs.chargebee.com/docs/api/hosted_pages#checkout_new_subscription\n        // If you want to use paypal, go cardless and plaid, pass embed parameter as false\n        let data = {\n          plan_id: \"silver\",\n          first_name: this.first_name,\n          last_name: this.last_name,\n          email: this.email,\n          phone: this.phone,\n          company: this.company\n        }\n        return this.http.post(\"http://localhost:3000/api/v1/auth/chargebee-checkout\", this.getFormUrlEncoded(data), {headers: new HttpHeaders({'Content-Type': 'application/x-www-form-urlencoded'})}).toPromise();\n      },\n      loaded: () => {\n        console.log(\"checkout opened\");\n      },\n      error: () => {\n        this.loading = false;\n        this.ref.markForCheck();\n        this.errMsg = true;\n      },\n      close: () => {;\n        this.loading = false;\n        this.ref.detectChanges();\n        console.log(\"checkout closed\");\n      },\n      success: (hostedPageId:any) => {\n        console.log(hostedPageId);\n        // Hosted page id will be unique token for the checkout that happened\n        // You can pass this hosted page id to your backend \n        // and then call our retrieve hosted page api to get subscription details\n        // https://apidocs.chargebee.com/docs/api/hosted_pages#retrieve_a_hosted_page\n      },\n      step: (value:any) => {\n          // value -> which step in checkout\n          console.log(value);\n      }\n    });\n  }\n\n}\n","<div id=\"container\" class=\"checkout container\">\n    <div id=\"customer-info\" class=\"row\">                \n        <div class=\"col-sm-7\" id=\"checkout_info\">   \n            <div id=\"subscribe-form\">\n                <div class=\"page-header\">\n                    <!-- <h3>Tell us about yourself</h3> -->\n                </div>\n                <!-- <div class=\"row\">\n                    <div class=\"col-sm-6\"> \n                        <div class=\"form-group\">\n                            <label for=\"first_name\">First Name</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"first_name\">\n                        </div>\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"last_name\">Last Name</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"last_name\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"email\">Email</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"email\">\n                        </div>\n                    </div> \n                                                \n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"phone\">Phone</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"phone\">\n                        </div>\n                    </div>                   \n                </div> \n                <div class=\"row\">\n                    <div class=\"col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"company\">Company</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"company\">\n                        </div>\n                    </div>\n                </div>                         -->\n                <hr>                            \n                <p class=\"text-danger\" *ngIf=\"errMsg\">There were errors while submitting</p>\n                <div class=\"form-inline\">\n                    <div class=\"form-group\">\n                    <a href=\"javascript:void(0)\" data-cb-type=\"checkout\" data-cb-item-0=\"cbdemo_advanced-USD-yearly\" data-cb-item-0-quantity=\"1\" >subscribe</a>\n                      <!-- <input type=\"submit\" (click)=\"openCheckout()\" class=\"submit-btn btn btn-success btn-lg\" value=\"Proceed to Payment\"> -->\n                    </div>\n                    <div class=\"form-group\">\n                      <span ref=\"loader\" class=\"subscribe-process process\" *ngIf=\"loading\">Processing&hellip;</span>\n                    </div>\n                </div>                        \n              </div>\n        </div>\n        <!-- <div class=\"col-sm-4 cb-order-list col-sm-offset-1\">\n            <div class=\"page-header\">\n                <h3>Subscription Details</h3>\n            </div>\n            <div class=\"media\">                    \t\n                <img src=\"/assets/images/plan.png\" alt=\"chargebee demo\" class=\"pull-left\">\n                <div class=\"media-body\">\n                  <p class=\"h4\">Marvel Classics</p>\n                    <p class=\"h4\">$9 <small><em>per month</em></small></p>\n                </div>\n            </div>\n        </div> -->\n    </div>\n    <div id=\"checkout-info\" class=\"row\">\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from \"./../differ-service-list/differ-service-list.service\";\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-customer-information',\n  templateUrl: './differ-customer-information.component.html',\n  styleUrls: ['./differ-customer-information.component.css']\n})\nexport class DifferCustomerInformationComponent implements OnInit {\n\n  InformationForm!: FormGroup;\n  submitted = false;\n  model: any;\n  constructor(private router: Router, private differServiceList: DifferServiceList) { }\n\n\n  ngOnInit(): void {\n    this.InformationForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      firstName: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(30)]),\n      lastName: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(30)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(15)]),\n      serviceAddress: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(70)]),\n      birthday: new FormControl('', [Validators.required,]),\n    });\n\n    this.prefilledEmail();\n  }\n\n  prefilledEmail() {\n    if(sessionStorage.getItem('email')) {\n      this.InformationForm.patchValue({\n        email: sessionStorage.getItem('email'),\n        serviceAddress: sessionStorage.getItem('address')\n      })\n    }\n  }\n\n  get informationFormHas(): { [key: string]: AbstractControl } {\n    return this.InformationForm.controls;\n  }\n\n  handleSubmit() {\n    this.submitted = true;\n    if (this.InformationForm.invalid) {\n      return;\n    }\n    console.log(this.InformationForm.value);\n \n    sessionStorage.setItem('birthday',this.InformationForm.value.birthday);\n    sessionStorage.setItem('firstName',this.InformationForm.value.firstName);\n    sessionStorage.setItem('lastName',this.InformationForm.value.lastName);\n    sessionStorage.setItem('password',this.InformationForm.value.password);\n    \n    let reqData = {\n      email: this.InformationForm.value.email,\n      firstName: this.InformationForm.value.firstName,\n      lastName: this.InformationForm.value.lastName,\n      password: this.InformationForm.value.password,\n      serviceAddress: this.InformationForm.value.serviceAddress,\n      birthday: this.InformationForm.value.birthday,\n    };\n    this.differServiceList.differCustomerInformation(reqData).subscribe((result: any) => {\n      if (result['code'] == 200) {\n        this.router.navigate(['/differ-checkout']);\n      }\n    },\n      (err: any) => {\n        console.log(err, \"error\");\n      });\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Customer Information</h3>\n            </div>\n            <div class=\"card-body\">\n                <form [formGroup]=\"InformationForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"Email\" formControlName=\"email\" required>\n                            <mat-error *ngIf=\"submitted && informationFormHas.email?.errors\">\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.email.errors?.required\">\n                                    Email is Required </mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.email.errors?.minlength\">\n                                    Email between 5 to 30 characters</mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.email.errors?.maxlength\">\n                                    Email between 5 to 30 characters</mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"First Name\" formControlName=\"firstName\" required>\n                            <mat-error *ngIf=\"submitted && informationFormHas.firstName?.errors\">\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.firstName.errors?.required\">\n                                    First Name is Required </mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.firstName.errors?.minlength\">\n                                    First Name between 3 to 30 characters</mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.firstName.errors?.maxlength\">\n                                    First Name between 3 to 30 characters</mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"Last Name\" formControlName=\"lastName\" required>\n                            <mat-error *ngIf=\"submitted && informationFormHas.lastName?.errors\">\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.lastName.errors?.required\">\n                                    Last Name is Required </mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.lastName.errors?.minlength\">\n                                    Last Name between 3 to 30 characters</mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.lastName.errors?.maxlength\">\n                                    Last Name between 3 to 30 characters</mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input type=\"password\" matInput placeholder=\"password\" formControlName=\"password\"\n                                name=\"password\" required>\n                            <mat-error *ngIf=\"submitted && informationFormHas.password?.errors\">\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.password.errors?.required\">\n                                    Last Name is Required </mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.password.errors?.minlength\">\n                                    Last Name between 5 to 30 characters</mat-error>\n                                <mat-error class=\"error-message\" *ngIf=\"informationFormHas.password.errors?.maxlength\">\n                                    Last Name between 5 to 30 characters</mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"serviceAddress\" formControlName=\"serviceAddress\"\n                                name=\"serviceAddress\" required>\n                            <mat-error *ngIf=\"submitted && informationFormHas.serviceAddress?.errors\">\n                                <mat-error class=\"error-message\"\n                                    *ngIf=\"informationFormHas.serviceAddress.errors?.required\">Service Address\n                                    is Required </mat-error>\n                                <mat-error class=\"error-message\"\n                                    *ngIf=\"informationFormHas.serviceAddress.errors?.minlength\">Service Address\n                                    between 5 to 70 characters</mat-error>\n                                <mat-error class=\"error-message\"\n                                    *ngIf=\"informationFormHas.serviceAddress.errors?.maxlength\">Service Address\n                                    between 5 to 70 characters</mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"form-group rounded-15\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker\" placeholder=\"Your birthday\"\n                                formControlName=\"birthday\" required>\n                            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error *ngIf=\"submitted && informationFormHas.birthday?.errors\">\n                                <mat-error *ngIf=\"informationFormHas.birthday.errors?.required\">Birth Date is Required\n                                </mat-error>\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-left\">Next</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-differ-nav-bar',\n  templateUrl: './differ-nav-bar.component.html',\n  styleUrls: ['./differ-nav-bar.component.css']\n})\nexport class DifferNavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>\n    <mat-toolbar color=\"primary\">\n        <!-- routerLink=\"/dashboard\" -->\n      <button  mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n        <span>DIFFER</span>  \n      </button>\n    </mat-toolbar>\n  </p> ","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Alexa-angular';\r\n}\r\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { MyInterceptor } from './config/http.interceptor';\r\nimport { NgxSmartModalModule, NgxSmartModalService } from 'ngx-smart-modal';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatButtonModule } from '@angular/material/button'\r\nimport { MatIconModule } from '@angular/material/icon'\r\nimport { MatToolbarModule } from '@angular/material/toolbar'\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule }  from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { DifferServiceAddressComponent } from './differ-service-address/differ-service-address.component';\r\nimport { DifferServiceListComponent } from './differ-service-list/differ-service-list.component';\r\nimport { DifferSignupComponent } from './differ-signup/differ-signup.component';\r\nimport { DifferSignupVerifyComponent } from './differ-signup-verify/differ-signup-verify.component';\r\nimport { DifferCustomerInformationComponent } from './differ-customer-information/differ-customer-information.component';\r\nimport { DifferNavBarComponent } from './differ-nav-bar/differ-nav-bar.component';\r\nimport { DifferMyProfileComponent } from './differ-my-profile/differ-my-profile.component';\nimport { CheckoutComponent } from './checkout/checkout.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    DifferServiceAddressComponent,\r\n    DifferServiceListComponent,\r\n    DifferSignupComponent,\r\n    DifferSignupVerifyComponent,\r\n    DifferCustomerInformationComponent,\r\n    DifferNavBarComponent,\r\n    DifferMyProfileComponent,\r\n    CheckoutComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatTableModule,\r\n    NgxSmartModalModule.forRoot(),\r\n    NgbModule\r\n    ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: MyInterceptor, multi: true },\r\n    NgxSmartModalService\r\n\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DifferServiceList {\n\n  constructor(private http:HttpClient) { }\n\n  differItemList() {\n    return this.http.get(\"http://localhost:3000/api/v1/auth/chargebee-item-list\");\n  }\n\n  differCreateCustomer(data:any) {\n    return this.http.post(\"http://localhost:3000/api/v1/auth/chargebee-user-list\",data);\n  }\n\n  differSignUpVerifyOTP(data:any) {\n    return this.http.put(\"http://localhost:3000/api/v1/auth/verify-mail\",data);\n  }\n\n  differCustomerInformation(data:any) {\n    return this.http.put(\"http://localhost:3000/api/v1/auth/chargebee-save-user-detail\",data);\n  }\n\n  differGetNetworkInfo(data:any) {\n    return this.http.put(\"http://localhost:3000/api/v1/auth/chargebee-network\",data);\n  }\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<div class=\"row mt-5 mb-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">{{ address }}</h3>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"row center-service-list \">\n    <div class=\"col-4 mb-4  \" *ngFor=\"let element of serviceItemList\">\n        <div class=\"card\" style=\"width: 18rem;\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Service Title</h5>\n              <h6 class=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>\n              <p class=\"card-text\">- {{ element.item.name }}.</p>\n              <p class=\"card-text\">- {{ element.item.status }}.</p>\n              <p class=\"card-text\">- here is a feature included.</p>\n              <button type=\"button\" (click)=\"handleServiceClick(element)\" class=\"card-link btn btn-info\">Order</button>\n            </div>\n          </div>\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DifferServiceList } from './differ-service-list.service';\nimport swal from 'sweetalert2';\n\n\n@Component({\n  selector: 'app-differ-service-list',\n  templateUrl: './differ-service-list.component.html',\n  styleUrls: ['./differ-service-list.component.css']\n})\nexport class DifferServiceListComponent implements OnInit {\n  public address : any = \"\";\n  public serviceList: any = [1,2,3];\n\n  constructor(private router: Router, private differServiceList:DifferServiceList) { }\n\n  ngOnInit(): void {\n    this.address = sessionStorage.getItem('address');\n    this.getItemList();  \n  }\n\n  handleServiceClick(data:any) {\n    // console.log(\"data>>>>>>>>>>>>>>>>>>>\",data);\n    sessionStorage.setItem(\"selectedId\",data.item.id);\n    this.router.navigate(['/differ-signup']);\n  }\n\n  serviceItemList : any = [];\n  getItemList() {\n    this.differServiceList.differItemList().subscribe((result:any) => {\n      console.log(result,\"result>>>>>>>>>>>>>>>>>\");\n      if(result['code'] == 200 ) {\n        this.serviceItemList = result['data']['list'];\n        console.log(this.serviceItemList)\n      }\n    }, \n    (err:any) => {\n      console.log(err,\"error\");\n    });\n  }\n  \n}\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { AuthService } from './../register/auth.service';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-differ-service-address',\n  templateUrl: './differ-service-address.component.html',\n  styleUrls: ['./differ-service-address.component.css']\n})\nexport class DifferServiceAddressComponent implements OnInit {\n\n  fullAddress = '';\n  serviceAddressForm!: FormGroup;\n  submitted = false;\n  @ViewChild('address') viewChildAddress:any;\n  @ViewChild('city') viewChildCity:any;\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.serviceAddressForm = new FormGroup({\n      address: new FormControl('', [Validators.required]),\n      city: new FormControl('', []),\n    });\n  }\n\n  get serviceAddressFormHas(): { [key: string]: AbstractControl } {\n    return this.serviceAddressForm.controls;\n  }\n\n\n  handleSubmit() {\n    this.submitted = true;\n\n    this.serviceAddressForm.patchValue({\n      address: this.viewChildAddress.nativeElement.value,\n      city: this.viewChildCity.nativeElement.value\n    });\n\n    if (this.serviceAddressForm.invalid) {\n      return;\n    }\n\n    this.fullAddress = this.serviceAddressForm.value.address + ' '+ this.serviceAddressForm.value.city;\n\n    sessionStorage.removeItem('address') \n    sessionStorage.setItem(\"address\",this.fullAddress);\n    this.router.navigate(['/differ-service-list']);\n  }\n  \n  cityChange(event:any) {\n    console.log(event.target.value,\"event>>>>>>\");\n    this.serviceAddressForm.patchValue({\n      city : event.target.value\n    })\n\n  }\n\n\n}\n","<app-differ-nav-bar></app-differ-nav-bar>\n\n<!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"http://ws1.postescanada-canadapost.ca/css/addresscomplete-2.30.min.css?key=ac53-ck32-re78-gc78\" /><script type=\"text/javascript\" src=\"http://ws1.postescanada-canadapost.ca/js/addresscomplete-2.30.min.js?key=ac53-ck32-re78-gc78\"></script> -->\n<!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"http://ws1.postescanada-canadapost.ca/css/addresscomplete-2.30.min.css?key=kr29-yz92-pw91-wr62\" /><script type=\"text/javascript\" src=\"http://ws1.postescanada-canadapost.ca/js/addresscomplete-2.30.min.js?key=kr29-yz92-pw91-wr62\"></script> -->\n<div class=\"row mt-5 title\">\n    <div class=\"col-md-6 mx-auto\">\n        <div class=\"card rounded-20\">\n            <div class=\"card-header\">\n                <h3 class=\"mb-0\">Enter your address to determine service</h3>\n            </div>\n            <div class=\"card-body\">\n                \n                <form [formGroup]=\"serviceAddressForm\" (ngSubmit)=\"handleSubmit()\" class=\"form\">\n                    \n                    <div class=\"form-group rounded-15\">\n                        <label for=\"\">Enter Your Address</label>\n                        \n                        <input type=\"text\" class=\"form-control\" formControlName=\"address\" name=\"address\" #address required>\n                    </div>\n                     <div *ngIf=\"submitted && serviceAddressFormHas.address?.errors\">\n                         <small *ngIf=\"serviceAddressFormHas.address.errors?.required\" class=\"text-danger\" > Address is Required </small>\n                     </div>\n\n                     <div class=\"form-group rounded-15\">\n                        <!-- <label for=\"\">Enter Your City</label> -->\n                        \n                        <input type=\"hidden\" class=\"form-control\" formControlName=\"city\" name=\"city\" #city>\n                    </div>\n\n                    <div class=\"\">\n                        <button type=\"submit\" class=\"btn btn-success float-right\">Check Service</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppComponent } from './app.component';\r\nimport { CheckoutComponent } from './checkout/checkout.component';\r\nimport { DifferCustomerInformationComponent } from './differ-customer-information/differ-customer-information.component';\r\nimport { DifferMyProfileComponent } from './differ-my-profile/differ-my-profile.component';\r\nimport { DifferServiceAddressComponent } from './differ-service-address/differ-service-address.component';\r\nimport { DifferServiceListComponent } from './differ-service-list/differ-service-list.component';\r\nimport { DifferSignupVerifyComponent } from './differ-signup-verify/differ-signup-verify.component';\r\nimport { DifferSignupComponent } from './differ-signup/differ-signup.component';\r\nimport { RouteGuard } from './route.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path : '',\r\n    pathMatch:'full',\r\n    redirectTo:'/differ-service-address',\r\n  },\r\n  {\r\n    path: 'differ-service-address',\r\n    component: DifferServiceAddressComponent,\r\n  },\r\n  {\r\n    path: 'differ-service-list',\r\n    component: DifferServiceListComponent,\r\n  },\r\n  {\r\n    path: 'differ-signup',\r\n    component: DifferSignupComponent,\r\n  },\r\n  {\r\n    path: 'differ-signup-verify',\r\n    component: DifferSignupVerifyComponent,\r\n  },\r\n  {\r\n    path: 'differ-customer-information',\r\n    component: DifferCustomerInformationComponent,\r\n  },\r\n  {\r\n    path: 'differ-my-profile',\r\n    component: DifferMyProfileComponent,\r\n  },\r\n  {\r\n    path: 'differ-checkout',\r\n    component: CheckoutComponent,\r\n  },\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}